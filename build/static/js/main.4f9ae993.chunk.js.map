{"version":3,"sources":["components/img/cat1.jpg","components/navigation.js","components/jumbotron.js","components/card.js","components/toasts.js","components/flushlist.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navigation","props","useState","isOpen","setIsOpen","Navbar","light","expand","NavbarBrand","href","src","logo","width","height","alt","NavbarToggler","onClick","Collapse","navbar","Nav","className","NavItem","NavLink","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","DropdownMenu","right","DropdownItem","divider","NavbarText","Example","Jumbotron","Button","color","icon","faPaw","Card","CardImg","top","CardBody","CardTitle","CardSubtitle","CardText","Toast","ToastHeader","ToastBody","ListGroup","ListGroupItem","active","ListGroupItemHeading","ListGroupItemText","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4f9ae993.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cat1.03edb9ee.jpg\";","import React, { useState } from 'react';\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink,\n  UncontrolledDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n  NavbarText\n} from 'reactstrap';\nimport logo from './img/cat1.jpg';\n\nconst Navigation = (props) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const toggle = () => setIsOpen(!isOpen);\n\n  return (\n    <div>\n      <Navbar light expand=\"md\">\n        <NavbarBrand href=\"/\">CATURDAY</NavbarBrand><img src={logo} width=\"30px\" height=\"30px\" alt=\"\"/>\n        <NavbarToggler onClick={toggle} />\n        <Collapse isOpen={isOpen} navbar>\n          <Nav className=\"mr-auto\" navbar>\n            <NavItem>\n              <NavLink href=\"/\">Katznachten</NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink href=\"/\">Pawfect</NavLink>\n            </NavItem>\n            <UncontrolledDropdown nav inNavbar>\n              <DropdownToggle nav caret>\n                Cats\n              </DropdownToggle>\n              <DropdownMenu right>\n                <DropdownItem>\n                  Option 1\n                </DropdownItem>\n                <DropdownItem>\n                  Option 2\n                </DropdownItem>\n                <DropdownItem divider />\n                <DropdownItem>\n                  Reset\n                </DropdownItem>\n              </DropdownMenu>\n            </UncontrolledDropdown>\n          </Nav>\n          <NavbarText>Lana & Lucy</NavbarText>\n        </Collapse>\n      </Navbar>\n    </div>\n  );\n}\n\nexport default Navigation;\n","import React from 'react';\nimport { Jumbotron, Button } from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPaw } from '@fortawesome/free-solid-svg-icons';\n\nconst Example = (props) => {\n  return (\n      <div className=\"col\">\n      <Jumbotron>\n        <h1 className=\"display-3\">TEXT TEXT TEXT</h1>\n        <p className=\"lead\">Das ist eine einfache Komponente.</p>\n        <hr className=\"my-2\" />\n        <p>Man kann verschiedene Text und Schriftarten nutzen.</p>\n        <p className=\"lead\">\n        <Button color=\"primary\"><FontAwesomeIcon icon={faPaw} />PAWFECT</Button>\n        </p>\n      </Jumbotron>\n      </div>\n  );\n};\n\nexport default Example;\n","import React from 'react';\nimport logo from './img/cat1.jpg';\nimport {\n  Card, CardImg, CardText, CardBody,\n  CardTitle, CardSubtitle, Button\n} from 'reactstrap';\n\nconst Example = (props) => {\n  return (\n    <div>\n      <Card>\n        <CardImg top width=\"100%\" src={logo} alt=\"Card image cap\" />\n        <CardBody>\n          <CardTitle>Card title</CardTitle>\n          <CardSubtitle>Card subtitle</CardSubtitle>\n          <CardText>Some quick example teasdxt to build on the card title and make up the bulk of the card's content.</CardText>\n          <Button>Button</Button>\n        </CardBody>\n      </Card>\n    </div>\n  );\n};\n\nexport default Example;\n","import React from 'react';\nimport { Toast, ToastBody, ToastHeader } from 'reactstrap';\n\nconst Example = (props) => {\n  return (\n    <div>\n      <div className=\"p-3 my-2 rounded\">\n        <Toast>\n          <ToastHeader>\n            Reactstrap\n          </ToastHeader>\n          <ToastBody>\n            This is a toast on a white background — check it out!\n          </ToastBody>\n        </Toast>\n      </div>\n      <div className=\"p-3 my-2 rounded bg-docs-transparent-grid\">\n        <Toast>\n          <ToastHeader>\n            Reactstrap\n          </ToastHeader>\n          <ToastBody>\n            This is a toast on a gridded background — check it out!\n          </ToastBody>\n        </Toast>\n      </div>\n    </div>\n  );\n};\n\nexport default Example;","import React from 'react';\nimport { ListGroup, ListGroupItem, ListGroupItemHeading, ListGroupItemText } from 'reactstrap';\n\nconst Example = (props) => {\n  return (\n    <ListGroup>\n      <ListGroupItem active>\n        <ListGroupItemHeading>List group item heading</ListGroupItemHeading>\n        <ListGroupItemText>\n        Donec id elit non mi porta gravida at eget metus. Maecenas sed diam eget risus varius blandit.\n        </ListGroupItemText>\n      </ListGroupItem>\n      <ListGroupItem>\n        <ListGroupItemHeading>List group item heading</ListGroupItemHeading>\n        <ListGroupItemText>\n        Donec id elit non mi porta gravida at eget metus. Maecenas sed diam eget risus varius blandit.\n        </ListGroupItemText>\n      </ListGroupItem>\n      <ListGroupItem>\n        <ListGroupItemHeading>List group item heading</ListGroupItemHeading>\n        <ListGroupItemText>\n        Donec id elit non mi porta gravida at eget metus. Maecenas sed diam eget risus varius blandit.\n        </ListGroupItemText>\n      </ListGroupItem>\n    </ListGroup>\n  );\n}\n\nexport default Example;","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './App.scss';\nimport Navigation from './components/navigation';\nimport Jumbotron from './components/jumbotron';\nimport Card from './components/card';\nimport Toasts from './components/toasts';\nimport FlushList from './components/flushlist';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navigation />\n      <header className=\"App-header\">\n      <div className=\"container\">\n        <div className=\"row\">\n        <Jumbotron />\n        <Jumbotron />\n        <Jumbotron />\n        </div>\n        <div className=\"row\">\n          <div className=\"col\">\n          <Card/>\n          </div>\n          <div className=\"col\">\n          <Card/>\n          </div>\n          <div className=\"col\">\n          <Card/>\n          </div>\n        </div>\n        </div>\n\n        <div className=\"row\">\n          <div className=\"col\">\n          <Toasts/>\n        </div>\n        <div className=\"col\">\n        <FlushList/>\n        </div>\n        </div>\n      </header>\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}